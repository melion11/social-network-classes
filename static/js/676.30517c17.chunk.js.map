{"version":3,"file":"static/js/676.30517c17.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Login/Login.module.css?3530","components/Login/LoginForm.tsx","components/Login/LoginContainer.tsx","webpack://samurai-way/./src/components/common/FormControls/FormsControls.module.css?3030","components/common/FormControls/FormsControls.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Login_container__9yA+K\",\"form\":\"Login_form__rwFpH\",\"label\":\"Login_label__Npcww\",\"input\":\"Login_input__QOQ9H\",\"checkbox\":\"Login_checkbox__xAxN+\",\"button\":\"Login_button__P3yiz\",\"formSummaryError\":\"Login_formSummaryError__jgoVQ\"};","import React from 'react';\r\nimport s from './Login.module.css'\r\nimport {Field, reduxForm, InjectedFormProps} from 'redux-form';\r\nimport {createField, Input} from '../common/FormControls/FormsControls';\r\nimport {required} from '../../utils/validators/validators';\r\n\r\nexport type LoginFormData = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\ntype AdditionalLoginFormDataType = {\r\n    captcha: string\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormData, AdditionalLoginFormDataType> & AdditionalLoginFormDataType> = (props) => {\r\n    const {handleSubmit, error, captcha} = props;\r\n\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <form className={s.form} onSubmit={handleSubmit}>\r\n                <label className={s.label}>\r\n                    Email:\r\n                    <Field className={s.input} name=\"email\" component={Input} type=\"text\"\r\n                           validate={[required]}\r\n                    />\r\n                </label>\r\n                <label className={s.label}>\r\n                    Password:\r\n                    <Field className={s.input} name=\"password\" component={Input} type=\"password\"\r\n                           validate={[required]}\r\n                    />\r\n                </label>\r\n                <label className={s.checkbox}>\r\n                    <Field name=\"rememberMe\" component=\"Input\" type=\"checkbox\"/>\r\n                    Remember me\r\n                </label>\r\n\r\n                {captcha && <img src={captcha}/>}\r\n                {captcha && createField('Symbols from image', 'captcha', [required], Input)}\r\n                {error && <div className={s.formSummaryError}>{error}</div>}\r\n\r\n                <button className={s.button} type=\"submit\">Log in</button>\r\n\r\n\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default reduxForm<LoginFormData, AdditionalLoginFormDataType>({\r\n    form: 'loginForm'\r\n})(LoginForm);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport LoginForm, {LoginFormData} from './LoginForm';\r\nimport {getCaptchaUrl, getLogIn} from '../../redux/reducers/authReducer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {StateType} from '../../redux/redux-store';\r\n\r\n\r\ntype LoginProps = {\r\n    isAuth: boolean\r\n    captcha: string\r\n    getLogIn: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\nconst Login: React.FC<LoginProps> = ({isAuth, getLogIn, captcha}) => {\r\n\r\n    const handleSubmit = (values: LoginFormData) => {\r\n        const {email, password, rememberMe, captcha} = values\r\n        getLogIn(email, password, rememberMe, captcha)\r\n    };\r\n\r\n    if (isAuth) return <Redirect to={'/profile'}/>\r\n\r\n\r\n         return (\r\n             <div>\r\n                 <LoginForm onSubmit={handleSubmit} captcha={captcha}/>\r\n             </div>\r\n         );\r\n     }\r\n\r\nconst mapStateToProps = (state: StateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captcha: state.auth.captcha\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {getLogIn})(Login);\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postInput\":\"FormsControls_postInput__UGwDH\",\"formControl\":\"FormsControls_formControl__dYuFv\",\"error\":\"FormsControls_error__azNq9\"};","import s from './FormsControls.module.css'\r\nimport {FC, ReactNode} from 'react';\r\nimport {Field} from 'redux-form';\r\n\r\n\r\nexport type FormControlProps = {\r\n    input: {\r\n        name: string;\r\n    };\r\n    meta: {\r\n        touched?: boolean;\r\n        error?: string;\r\n    }\r\n    children: ReactNode\r\n}\r\n\r\nexport const FormControl: FC<FormControlProps> = (props) => {\r\n    const {input, meta: {touched , error}, children} = props\r\n\r\n    const hasError = error && touched\r\n\r\n    return(\r\n        <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\r\n            {children}\r\n            <div>\r\n                {hasError &&  <span className={s.error}>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport const Textarea: FC<FormControlProps> = (props) => {\r\n    const {input, meta,  ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\nexport const Input: FC<FormControlProps> = (props) => {\r\n    const {input, meta,  ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: string,\r\n                            name: string,\r\n                            validators: any[],\r\n                            component: React.FC<FormControlProps>,\r\n                            props?: { type: string },\r\n                            text: string = '') => {\r\n    return (\r\n        <div style={{display:'flex', gap: '10px', justifyContent: 'center', alignItems: 'center', color: 'black'}}>\r\n            <Field placeholder={placeholder}\r\n                   name={name}\r\n                   component={component}\r\n                   validate={validators}\r\n                   {...props}/>\r\n            {text}\r\n        </div>\r\n    )\r\n}","export const required = (value: string) => {\r\n    if (value) {\r\n        return undefined\r\n    } else {\r\n        return 'Field is required'\r\n    }\r\n}\r\n\r\nexport const maxLength = (maxLength : number) => (value: string) => {\r\n    if (value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    } else {\r\n        return undefined\r\n    }\r\n}"],"names":["reduxForm","form","props","handleSubmit","error","captcha","className","s","onSubmit","Field","name","component","Input","type","validate","required","src","createField","connect","state","isAuth","auth","getLogIn","to","values","email","password","rememberMe","FormControl","input","meta","touched","children","hasError","Textarea","restProps","placeholder","validators","text","style","display","gap","justifyContent","alignItems","color","value","maxLength","length"],"sourceRoot":""}