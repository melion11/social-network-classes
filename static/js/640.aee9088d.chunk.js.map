{"version":3,"file":"static/js/640.aee9088d.chunk.js","mappings":"wKACA,EAAwC,uCAAxC,EAA+F,+BAA/F,EAA2I,4BAA3I,EAAyL,iCAAzL,EAAyO,8BCAzO,GAAgB,QAAU,yBAAyB,YAAc,8B,SCOpDA,EAAU,SAACC,GAEpB,OAEI,iBAAoBC,UAAWC,EAAAA,QAA/B,WACI,gBAAKD,UAAWC,EAAAA,OAAhB,UACI,iCAEJ,gBAAKD,UAAWC,EAAAA,YAAhB,UACI,uBAAIF,EAAMG,cALRH,EAAMI,KCXxB,K,UCQaC,EAAa,SAACL,GAEvB,OAAO,SAAC,KAAD,CAASM,gBAAiBJ,EAAAA,WAAcK,GAAE,mBAAcP,EAAMI,IAA9D,UACH,eAAKH,UAAWC,EAAAA,WAAhB,SACCF,EAAMQ,UCZf,EAA8K,gCAA9K,EAA6N,oCAA7N,EAA8Q,kC,SC0B9Q,IAhBqBC,E,QAAAA,GAAU,MAgBhBC,EAAAA,EAAAA,GAA4B,CACvCC,KAAM,qBADV,EAd+D,SAACX,GAE5D,IAAOY,EAAgBZ,EAAhBY,aAGP,OACI,kBAAMC,SAAUD,EAAcX,UAAWC,EAAzC,WACI,kBAAOY,KAAK,OAAOb,UAAWC,EAAgBa,YAAY,0BAC1D,mBAAQD,KAAK,SAASb,UAAWC,EAAjC,UACI,cAAGD,UAAU,+B,uCCW7B,GAHyBe,EAAAA,EAAAA,KAA6BC,EAAAA,EAAAA,KAV9B,SAACC,GACrB,MAAO,CACHC,QAASD,EAAME,YAAYD,QAC3BE,SAAUH,EAAME,YAAYC,YAO2C,CAACC,WAAAA,EAAAA,IAC5EC,EAAAA,EADqBP,EChBF,SAAChB,GAEpB,IAAMwB,EAAkBxB,EAAMmB,QAAQM,KAAI,SAAAC,GAAM,OAAI,SAACrB,EAAD,CAA4BD,GAAIsB,EAAOtB,GAAII,KAAMkB,EAAOlB,MAAvCkB,EAAOtB,OACtEuB,EAAmB3B,EAAMqB,SAASI,KAAI,SAAAtB,GAAO,OAAI,SAACJ,EAAD,CAA0BK,GAAID,EAAQC,GAAID,QAASA,EAAQA,SAA7CA,EAAQC,OAM7E,OAEI,iBAAKH,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,UACI,eAAID,UAAWC,EAAf,SACKsB,OAIT,iBAAKvB,UAAWC,EAAhB,WACI,eAAID,UAAWC,EAAf,SACKyB,KAEF,SAAC,EAAD,CAAed,SAjBD,SAACe,GAC1B5B,EAAMsB,WAAWM,EAAOC,6B,4ECpBzB,IAAMC,EAAW,SAACC,GACrB,OAAIA,OACA,EAEO,qBAIFtB,EAAY,SAACA,GAAD,OAAwB,SAACsB,GAC9C,OAAIA,EAAMC,OAASvB,EACT,iBAAN,OAAwBA,EAAxB,iBAEA","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://samurai-way/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialog/DialogItem.module.css","components/Dialogs/Dialog/DialogItem.tsx","webpack://samurai-way/./src/components/Dialogs/Message/MessageSender/MessageSender.module.css?d3c2","components/Dialogs/Message/MessageSender/MessageSender.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsWrapperContent\":\"Dialogs_dialogsWrapperContent__Z+Fuu\",\"dialogWrapper\":\"Dialogs_dialogWrapper__2mmLX\",\"dialogList\":\"Dialogs_dialogList__U9EpU\",\"messagesWrapper\":\"Dialogs_messagesWrapper__5rERQ\",\"messagesList\":\"Dialogs_messagesList__YUcAv\"};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__KUomj\",\"messageText\":\"Message_messageText__qKPBs\"};","import React from 'react';\r\nimport s from './Message.module.css'\r\n\r\nexport type MessagePropsType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n\r\n    return (\r\n\r\n        <div key={props.id} className={s.message}>\r\n            <div className={s.sender}>\r\n                <p>Me</p>\r\n            </div>\r\n            <div className={s.messageText}>\r\n                <p>{props.message}</p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\n// <li className={s.messagesItem}>{props.message}</li>","// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react';\r\nimport s from './DialogItem.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport const DialogItem = (props: DialogPropsType) => {\r\n\r\n    return <NavLink activeClassName={s.activeLink} to={`/dialogs/${props.id}`}>\r\n        <li  className={s.dialogItem}>\r\n        {props.name}</li>\r\n    </NavLink>\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"MessageSender_message__RDdg9\",\"message-sender\":\"MessageSender_message-sender__OauxT\",\"message-text\":\"MessageSender_message-text__Valwn\",\"sendForm\":\"MessageSender_sendForm__4DDPZ\",\"messageInput\":\"MessageSender_messageInput__dGh3y\",\"sendButton\":\"MessageSender_sendButton__S-RF4\"};","import React, {ChangeEvent, FC} from 'react';\r\nimport s from './MessageSender.module.css'\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {FormControl, Textarea} from '../../../common/FormControls/FormsControls';\r\nimport {maxLength, required} from '../../../../utils/validators/validators';\r\n\r\n\r\nexport type MessageInputType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength100 = maxLength(100)\r\n\r\nconst MessageSender: FC<InjectedFormProps<MessageInputType>> = (props) => {\r\n\r\n    const {handleSubmit} = props\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={s.sendForm}>\r\n            <input type=\"text\" className={s.messageInput} placeholder=\"Type your message...\"/>\r\n            <button type=\"submit\" className={s.sendButton}>\r\n                <i className=\"fa fa-paper-plane\"></i>\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\nexport default reduxForm<MessageInputType>({\r\n    form: 'dialogMessageForm'\r\n})(MessageSender)","import React from 'react';\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRedirect} from \"../../hoc/withRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {DialogType, MessageType, newMessage} from '../../redux/reducers/dialogsReducer';\r\nimport {StateType} from '../../redux/redux-store';\r\n\r\n\r\n\r\ntype MapStateToProps = {\r\n    dialogs: DialogType[]\r\n    messages: MessageType[]\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    newMessage: (newMessageBody: string)=>void\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: StateType) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst DialogsContainer = compose<React.ComponentType>(connect(mapStateToProps, {newMessage}),\r\n    withRedirect)(Dialogs)\r\n\r\nexport default DialogsContainer\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogItem} from \"./Dialog/DialogItem\";\r\nimport MessageSender, {MessageInputType} from './Message/MessageSender/MessageSender';\r\nimport {DialogType, MessageType} from '../../redux/reducers/dialogsReducer';\r\n\r\nexport type DialogsPropsType = {\r\n    dialogs: DialogType[]\r\n    messages: MessageType[]\r\n    newMessage: (newMessageBody: string)=>void\r\n}\r\n\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n    const dialogsElements = props.dialogs.map(dialog => <DialogItem key={dialog.id} id={dialog.id} name={dialog.name}/>)\r\n    const messagesElements = props.messages.map(message => <Message key={message.id} id={message.id} message={message.message}/>)\r\n\r\n    const addNewMessageHandler = (values: MessageInputType) => {\r\n        props.newMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n\r\n        <div className={s.dialogsWrapperContent}>\r\n            <div className={s.dialogWrapper}>\r\n                <ul className={s.dialogList}>\r\n                    {dialogsElements}\r\n                </ul>\r\n            </div>\r\n\r\n            <div className={s.messagesWrapper}>\r\n                <ul className={s.messagesList}>\r\n                    {messagesElements}\r\n                </ul>\r\n                   <MessageSender onSubmit={addNewMessageHandler}/>\r\n          </div>\r\n        </div>\r\n              );\r\n};\r\n\r\n","export const required = (value: string) => {\r\n    if (value) {\r\n        return undefined\r\n    } else {\r\n        return 'Field is required'\r\n    }\r\n}\r\n\r\nexport const maxLength = (maxLength : number) => (value: string) => {\r\n    if (value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    } else {\r\n        return undefined\r\n    }\r\n}"],"names":["Message","props","className","s","message","id","DialogItem","activeClassName","to","name","maxLength","reduxForm","form","handleSubmit","onSubmit","type","placeholder","compose","connect","state","dialogs","dialogsPage","messages","newMessage","withRedirect","dialogsElements","map","dialog","messagesElements","values","newMessageBody","required","value","length"],"sourceRoot":""}